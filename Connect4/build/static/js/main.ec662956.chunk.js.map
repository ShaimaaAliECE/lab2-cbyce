{"version":3,"sources":["index.js"],"names":["boardStyle","display","flexDirection","alignItems","justifyContent","height","messageStyle","padding","width","backgroundColor","border","borderRadius","ResetBtn","id","onClick","window","location","reload","TurnMessage","props","message","player","win","owner","count","style","Hole","holesStyle","margin","disabled","GameBoard","state","gameBoard","Array","fill","winner","playersTurn","posX","posY","holeId","this","newBoard","map","arr","slice","setState","checkWinner","renderHole","renderRow","React","Component","checkFour","a","b","c","d","j","i","ReactDOM","render","minWidth","minHeight","document","getElementById"],"mappings":"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","file":"static/js/main.ec662956.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n/*----- Styling for the game -----*/\n// Board and Display styling\nconst boardStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center', \n  justifyContent: 'space-between', \n  height: '485px'\n}\n\n// Whole pages styling\nconst pageStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center', \n  justifyContent: 'space-evenly', \n  minWidth: '475px',\n  minHeight: '515px',\n  height: '100vh',\n  backgroundColor: 'antiquewhite'\n}\n\n// Message display styling \nconst messageStyle = {\n  display: 'flex', \n  alignItems: 'center', \n  justifyContent: 'center',\n  padding: '5px 10px', \n  width: '175px', \n  backgroundColor: 'white', \n  border: '2px solid black', \n  borderRadius: '35px' \n};\n\n// Button to refresh page and thus restart game\nfunction ResetBtn(){\n  return (\n    <button id={\"resetBtn\"} onClick={() => \n                      {\n                        window.location.reload(false);\n                      }\n                    }>\n      Click To Restart\n    </button>\n  );\n}\n\n// User message displayed for turn and winner\nfunction TurnMessage(props) {\n  let message, player;\n\n  if (props.win !== '') {\n    // If there is a winner\n    message = \"Player Wins!\";\n    player = (props.owner === 'red') ? 'yellow' : 'red'; //Opposite of whos turn it is because last turn won\n  } else if (props.count === 42) {\n    // Board filled without a winner\n    message = \"Tie Game\";\n    player = 'orange';\n  } else {\n    // Displays the next players turn\n    message = \"Players Turn\";\n    player = props.owner;\n  }\n\n  return (\n    <div style={messageStyle}>\n      <Hole owner={player} id={\"displayDot\"} /> \n      <div>\n        {message}\n      </div>\n    </div>\n  );\n}\n\n// Hole button on the board\nfunction Hole(props)\n{\n  // Owner of spot determines color\n  let holesStyle = {\n    backgroundColor: props.owner,\n    height: '50px',\n    width: '50px',\n    borderRadius: '25px',\n    margin: '5px'\n  };\n  \n  return (\n    <button style={holesStyle} id={props.id} onClick={props.onClick} disabled={props.disabled}></button>\n  );\n}\n\nclass GameBoard extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.state = {\n      gameBoard: new Array(6).fill(new Array(7).fill('white')), // Multi dimensional array for the board\n      winner: '', // Winner of the match\n      count: 0, // Number of turns played \n      playersTurn: 'red' // The player who is about to place a checker (Game starts with red player) \n    }\n  }\n\n  // Renders the holes on the board \n  renderHole(posX, posY)\n  {\n    // Unique id for each hole\n    let holeId = 'X' + posX + 'Y' + posY;\n\n    return (\n      // Owner is determined by color in the board multi dimensional array\n      // Disables the button if owned by a color or winner already determined\n      <Hole id={holeId} \n            owner={this.state.gameBoard[posY][posX]} \n            disabled={(this.state.gameBoard[posY][posX] !== 'white' || this.state.winner !== '')}\n            onClick={() => \n              {\n                // Copy of the current board\n                const newBoard = this.state.gameBoard.map((arr) => {\n                  return arr.slice();\n                });\n\n                // Copy of the row the player clicked\n                let newVal = newBoard[posY];\n\n                // Updates the white spot to the current players color\n                newVal[posX] = this.state.playersTurn;\n              \n\n                this.setState({\n                  playersTurn: (this.state.playersTurn === 'red') ? 'yellow' : 'red', // Sets the turn to the other player\n                  gameBoard: newBoard, // Updates the game board with the players move\n                  count: (this.state.count + 1), // Increases turn count\n                  winner: checkWinner(newBoard) // Checks to see if there is a winner (If no winner, sets to '')\n                });\n              }\n          }/>\n    );\n  }\n\n  // Creates a row of 7 holes at the y position\n  renderRow(posY)\n  {\n    return (\n      <div>\n        {this.renderHole(0, posY)}\n        {this.renderHole(1, posY)}\n        {this.renderHole(2, posY)}\n        {this.renderHole(3, posY)}\n        {this.renderHole(4, posY)}\n        {this.renderHole(5, posY)}\n        {this.renderHole(6, posY)}\n      </div>\n    );\n  }\n\n  render() \n  {\n    // Renders rows of gameboard and renders the turn message\n    return (\n      <div style={boardStyle}>\n        <TurnMessage win={this.state.winner} count={this.state.count} owner={this.state.playersTurn} />\n        <div style={{backgroundColor: 'blue', borderRadius: '25px', width: '420px', padding: '15px'}}>\n          {this.renderRow(0)}\n          {this.renderRow(1)}\n          {this.renderRow(2)}\n          {this.renderRow(3)}\n          {this.renderRow(4)}\n          {this.renderRow(5)}\n        </div>\n      </div>\n    );\n  }\n}\n\n// Checks if four holes are connected and if they are a players color\nfunction checkFour(a, b, c, d)\n{\n  return (\n          (a !== 'white' && b !== 'white' && c !== 'white' && d !== 'white') \n          && \n          (a === b && b === c && c === d)\n    );\n}\n\n// Checks each row and column of the board for a winner, returns winning colour\nfunction checkWinner(b)\n{\n  // For each row\n  for (var j = 0; j < 6; j++)\n  {\n    // For each possible position in column \n    for(var i = 0; i < 4; i++) \n    {\n      if (checkFour(b[j][0 + i], b[j][1 + i], b[j][2 + i], b[j][3 + i]))\n      {\n        return b[j][0 + i];\n      }\n    }\n  }\n\n  // For each column\n  for (var j = 0; j < 7; j++)\n  {\n    // For each possible possition in a row\n    for(var i = 0; i < 3; i++) \n    {\n      if (checkFour(b[0 + i][j], b[1 + i][j], b[2 + i][j], b[3 + i][j]))\n      {\n        return b[0 + i][j];\n      }\n    }\n  }\n\n  // Return empty string if there isnt a winner\n  return '';\n}\n\nReactDOM.render(\n  <div style={pageStyle}>\n    <GameBoard />\n    <ResetBtn />\n  </div>\n  ,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}