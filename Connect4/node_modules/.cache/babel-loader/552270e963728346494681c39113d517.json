{"ast":null,"code":"var _jsxFileName = \"/Users/cambyce/Downloads/University/Web Technologies (SE 3316)/Labs/Lab2/lab2/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n/*----- Styling for the game -----*/\n// Board and Display styling\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst boardStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'space-evenly',\n  height: '55%'\n}; // Whole pages styling\n\nconst pageStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'space-evenly',\n  height: '100vh',\n  backgroundColor: 'antiquewhite'\n}; // Message display styling \n\nconst messageStyle = {\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  padding: '5px 10px',\n  width: '175px',\n  backgroundColor: 'white',\n  border: '2px solid black',\n  borderRadius: '35px'\n}; //Should I just move this to the bottom code or leep it here *****************************\n\nfunction ResetBtn() {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    id: \"resetBtn\",\n    onClick: () => {\n      window.location.reload(false);\n    },\n    children: \"Click To Restart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n} // User message displayed for turn and winner\n\n\n_c = ResetBtn;\n\nfunction TurnMessage(props) {\n  let message, player;\n\n  if (props.win !== '') {\n    //If there is a winner\n    message = \"Player Wins!\";\n    player = props.owner === 'red' ? 'yellow' : 'red'; //Opposite of whos turn it is because last turn won\n  } else if (props.count === 42) {\n    //Board filled without a winner\n    message = \"Tie Game\";\n    player = 'orange';\n  } else {\n    // Displays the next players turn\n    message = \"Players Turn\";\n    player = props.owner;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: messageStyle,\n    children: [/*#__PURE__*/_jsxDEV(Hole, {\n      owner: player,\n      id: \"displayDot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n} // Hole button on the board\n\n\n_c2 = TurnMessage;\n\nfunction Hole(props) {\n  // Owner of spot determines color\n  let holesStyle = {\n    backgroundColor: props.owner,\n    height: '50px',\n    width: '50px',\n    borderRadius: '25px',\n    margin: '5px'\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    style: holesStyle,\n    id: props.id,\n    onClick: props.onClick,\n    disabled: props.disabled\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = Hole;\n\nclass GameBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameBoard: new Array(6).fill(new Array(7).fill('white')),\n      // Multi dimensional array for the board\n      winner: '',\n      // Winner of the match\n      count: 0,\n      // Number of turns played \n      playersTurn: 'red' // The player who is about to place a checker (Game starts with red player) \n\n    };\n  } // Renders the holes on the board \n\n\n  renderHole(posX, posY) {\n    // Unique id for each hole\n    let holeId = 'X' + posX + 'Y' + posY;\n    return (\n      /*#__PURE__*/\n      //Edit onclick to be better aligned ********************************\n      // Owner is determined by color in the board multi dimensional array\n      // Disables the button if owned by a color or winner already determined\n      _jsxDEV(Hole, {\n        id: holeId,\n        owner: this.state.gameBoard[posY][posX],\n        disabled: this.state.gameBoard[posY][posX] !== 'white' || this.state.winner !== '',\n        onClick: () => {\n          // Copy of the current board\n          const newBoard = this.state.gameBoard.map(arr => {\n            return arr.slice();\n          }); // Copy of the row the player clicked\n\n          let newVal = newBoard[posY]; // Updates the white spot to the current players color\n\n          newVal[posX] = this.state.playersTurn;\n          this.setState({\n            playersTurn: this.state.playersTurn === 'red' ? 'yellow' : 'red',\n            // Sets the turn to the other player\n            gameBoard: newBoard,\n            // Updates the game board with the players move\n            count: this.state.count + 1,\n            // Increases turn count\n            winner: checkWinner(newBoard) // Checks to see if there is a winner (If no winner, sets to '')\n\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }, this)\n    );\n  } // Creates a row of 7 holes at the y position\n\n\n  renderRow(posY) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.renderHole(0, posY), this.renderHole(1, posY), this.renderHole(2, posY), this.renderHole(3, posY), this.renderHole(4, posY), this.renderHole(5, posY), this.renderHole(6, posY)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    // Renders rows of gameboard and renders the turn message\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: boardStyle,\n      children: [/*#__PURE__*/_jsxDEV(TurnMessage, {\n        win: this.state.winner,\n        count: this.state.count,\n        owner: this.state.playersTurn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: 'blue',\n          borderRadius: '25px',\n          width: '420px',\n          padding: '15px'\n        },\n        children: [this.renderRow(0), this.renderRow(1), this.renderRow(2), this.renderRow(3), this.renderRow(4), this.renderRow(5)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction checkFour(a, b, c, d) {\n  return a !== 'white' && b !== 'white' && c !== 'white' && d !== 'white' && a === b && b === c && c === d;\n}\n\nfunction checkWinner(b) {\n  for (var j = 0; j < 6; j++) {\n    for (var i = 0; i < 4; i++) {\n      if (checkFour(b[j][0 + i], b[j][1 + i], b[j][2 + i], b[j][3 + i])) {\n        return b[j][0 + i];\n      }\n    }\n  }\n\n  for (var j = 0; j < 7; j++) {\n    for (var i = 0; i < 3; i++) {\n      if (checkFour(b[0 + i][j], b[1 + i][j], b[2 + i][j], b[3 + i][j])) {\n        return b[0 + i][j];\n      }\n    }\n  }\n\n  return '';\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(\"div\", {\n  style: pageStyle,\n  children: [/*#__PURE__*/_jsxDEV(GameBoard, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(ResetBtn, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 218,\n  columnNumber: 3\n}, this), document.getElementById('root'));\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ResetBtn\");\n$RefreshReg$(_c2, \"TurnMessage\");\n$RefreshReg$(_c3, \"Hole\");","map":{"version":3,"sources":["/Users/cambyce/Downloads/University/Web Technologies (SE 3316)/Labs/Lab2/lab2/src/index.js"],"names":["React","ReactDOM","boardStyle","display","flexDirection","alignItems","justifyContent","height","pageStyle","backgroundColor","messageStyle","padding","width","border","borderRadius","ResetBtn","window","location","reload","TurnMessage","props","message","player","win","owner","count","Hole","holesStyle","margin","id","onClick","disabled","GameBoard","Component","constructor","state","gameBoard","Array","fill","winner","playersTurn","renderHole","posX","posY","holeId","newBoard","map","arr","slice","newVal","setState","checkWinner","renderRow","render","checkFour","a","b","c","d","j","i","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n/*----- Styling for the game -----*/\n// Board and Display styling\nconst boardStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center', \n  justifyContent: 'space-evenly', \n  height: '55%'\n}\n\n// Whole pages styling\nconst pageStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center', \n  justifyContent: 'space-evenly', \n  height: '100vh',\n  backgroundColor: 'antiquewhite'\n}\n\n// Message display styling \nconst messageStyle = {\n  display: 'flex', \n  alignItems: 'center', \n  justifyContent: 'center',\n  padding: '5px 10px', \n  width: '175px', \n  backgroundColor: 'white', \n  border: '2px solid black', \n  borderRadius: '35px' \n};\n\n//Should I just move this to the bottom code or leep it here *****************************\nfunction ResetBtn(){\n  return (\n    <button id={\"resetBtn\"} onClick={() => \n                      {\n                        window.location.reload(false);\n                      }\n                    }>\n      Click To Restart\n    </button>\n  );\n}\n\n// User message displayed for turn and winner\nfunction TurnMessage(props) {\n  let message, player;\n\n  if (props.win !== '') {\n    //If there is a winner\n    message = \"Player Wins!\";\n    player = (props.owner === 'red') ? 'yellow' : 'red'; //Opposite of whos turn it is because last turn won\n  } else if (props.count === 42) {\n    //Board filled without a winner\n    message = \"Tie Game\";\n    player = 'orange';\n  } else {\n    // Displays the next players turn\n    message = \"Players Turn\";\n    player = props.owner;\n  }\n\n  return (\n    <div style={messageStyle}>\n      {/* Displays chekcker instead of color name */}\n      <Hole owner={player} id={\"displayDot\"} /> \n      <div>\n        {message}\n      </div>\n    </div>\n  );\n}\n\n// Hole button on the board\nfunction Hole(props)\n{\n  // Owner of spot determines color\n  let holesStyle = {\n    backgroundColor: props.owner,\n    height: '50px',\n    width: '50px',\n    borderRadius: '25px',\n    margin: '5px'\n  };\n  \n  return (\n    <button style={holesStyle} id={props.id} onClick={props.onClick} disabled={props.disabled}></button>\n  );\n}\n\nclass GameBoard extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.state = {\n      gameBoard: new Array(6).fill(new Array(7).fill('white')), // Multi dimensional array for the board\n      winner: '', // Winner of the match\n      count: 0, // Number of turns played \n      playersTurn: 'red' // The player who is about to place a checker (Game starts with red player) \n    }\n  }\n\n  // Renders the holes on the board \n  renderHole(posX, posY)\n  {\n    // Unique id for each hole\n    let holeId = 'X' + posX + 'Y' + posY;\n\n    return (\n      //Edit onclick to be better aligned ********************************\n      // Owner is determined by color in the board multi dimensional array\n      // Disables the button if owned by a color or winner already determined\n      <Hole  id={holeId} owner={this.state.gameBoard[posY][posX]} disabled={(this.state.gameBoard[posY][posX] !== 'white' || this.state.winner !== '')}\n                                          onClick={() => \n                                           {\n                                              // Copy of the current board\n                                              const newBoard = this.state.gameBoard.map((arr) => {\n                                                return arr.slice();\n                                              });\n\n                                              // Copy of the row the player clicked\n                                              let newVal = newBoard[posY];\n\n                                              // Updates the white spot to the current players color\n                                              newVal[posX] = this.state.playersTurn;\n                                            \n\n                                              this.setState({\n                                                playersTurn: (this.state.playersTurn === 'red') ? 'yellow' : 'red', // Sets the turn to the other player\n                                                gameBoard: newBoard, // Updates the game board with the players move\n                                                count: (this.state.count + 1), // Increases turn count\n                                                winner: checkWinner(newBoard) // Checks to see if there is a winner (If no winner, sets to '')\n                                              });\n                                            }\n                                        }/>\n    );\n  }\n\n  // Creates a row of 7 holes at the y position\n  renderRow(posY)\n  {\n    return (\n      <div>\n        {this.renderHole(0, posY)}\n        {this.renderHole(1, posY)}\n        {this.renderHole(2, posY)}\n        {this.renderHole(3, posY)}\n        {this.renderHole(4, posY)}\n        {this.renderHole(5, posY)}\n        {this.renderHole(6, posY)}\n      </div>\n    );\n  }\n\n  render() \n  {\n    // Renders rows of gameboard and renders the turn message\n    return (\n      <div style={boardStyle}>\n        <TurnMessage win={this.state.winner} count={this.state.count} owner={this.state.playersTurn} />\n        <div style={{backgroundColor: 'blue', borderRadius: '25px', width: '420px', padding: '15px'}}>\n          {this.renderRow(0)}\n          {this.renderRow(1)}\n          {this.renderRow(2)}\n          {this.renderRow(3)}\n          {this.renderRow(4)}\n          {this.renderRow(5)}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction checkFour(a, b, c, d)\n{\n  return (\n          (a !== 'white' && b !== 'white' && c !== 'white' && d !== 'white') \n          && \n          (a === b && b === c && c === d)\n    );\n}\n\nfunction checkWinner(b)\n{\n  for (var j = 0; j < 6; j++)\n  {\n    for(var i = 0; i < 4; i++) \n    {\n      if (checkFour(b[j][0 + i], b[j][1 + i], b[j][2 + i], b[j][3 + i]))\n      {\n        return b[j][0 + i];\n      }\n    }\n  }\n\n  for (var j = 0; j < 7; j++)\n  {\n    for(var i = 0; i < 3; i++) \n    {\n      if (checkFour(b[0 + i][j], b[1 + i][j], b[2 + i][j], b[3 + i][j]))\n      {\n        return b[0 + i][j];\n      }\n    }\n  }\n\n  return '';\n}\n\nReactDOM.render(\n  <div style={pageStyle}>\n    <GameBoard />\n    <ResetBtn />\n  </div>\n  ,\n  document.getElementById('root')\n);\n\n"]},"metadata":{},"sourceType":"module"}