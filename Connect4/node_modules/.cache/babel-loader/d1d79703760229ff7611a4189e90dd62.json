{"ast":null,"code":"import _classCallCheck from\"/Users/cambyce/Downloads/University/Web Technologies (SE 3316)/Labs/Lab2/lab2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/cambyce/Downloads/University/Web Technologies (SE 3316)/Labs/Lab2/lab2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/cambyce/Downloads/University/Web Technologies (SE 3316)/Labs/Lab2/lab2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/cambyce/Downloads/University/Web Technologies (SE 3316)/Labs/Lab2/lab2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import ReactDOM from'react-dom';import'./index.css';/*----- Styling for the game -----*/ // Board and Display styling\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var boardStyle={display:'flex',flexDirection:'column',alignItems:'center',justifyContent:'space-between',height:'485px'};// Whole pages styling\nvar pageStyle={display:'flex',flexDirection:'column',alignItems:'center',justifyContent:'space-evenly',minWidth:'475px',minHeight:'515px',height:'100vh',backgroundColor:'antiquewhite'};// Message display styling \nvar messageStyle={display:'flex',alignItems:'center',justifyContent:'center',padding:'5px 10px',width:'175px',backgroundColor:'white',border:'2px solid black',borderRadius:'35px'};// Button to refresh page and thus restart game\nfunction ResetBtn(){return/*#__PURE__*/_jsx(\"button\",{id:\"resetBtn\",onClick:function onClick(){window.location.reload(false);},children:\"Click To Restart\"});}// User message displayed for turn and winner\nfunction TurnMessage(props){var message,player;if(props.win!==''){// If there is a winner\nmessage=\"Player Wins!\";player=props.owner==='red'?'yellow':'red';//Opposite of whos turn it is because last turn won\n}else if(props.count===42){// Board filled without a winner\nmessage=\"Tie Game\";player='orange';}else{// Displays the next players turn\nmessage=\"Players Turn\";player=props.owner;}return/*#__PURE__*/_jsxs(\"div\",{style:messageStyle,children:[/*#__PURE__*/_jsx(Hole,{owner:player,id:\"displayDot\"}),/*#__PURE__*/_jsx(\"div\",{children:message})]});}// Hole button on the board\nfunction Hole(props){// Owner of spot determines color\nvar holesStyle={backgroundColor:props.owner,height:'50px',width:'50px',borderRadius:'25px',margin:'5px'};return/*#__PURE__*/_jsx(\"button\",{style:holesStyle,id:props.id,onClick:props.onClick,disabled:props.disabled});}var GameBoard=/*#__PURE__*/function(_React$Component){_inherits(GameBoard,_React$Component);var _super=_createSuper(GameBoard);function GameBoard(props){var _this;_classCallCheck(this,GameBoard);_this=_super.call(this,props);_this.state={gameBoard:new Array(6).fill(new Array(7).fill('white')),// Multi dimensional array for the board\nwinner:'',// Winner of the match\ncount:0,// Number of turns played \nplayersTurn:'red'// The player who is about to place a checker (Game starts with red player) \n};return _this;}// Renders the holes on the board \n_createClass(GameBoard,[{key:\"renderHole\",value:function renderHole(posX,posY){var _this2=this;// Unique id for each hole\nvar holeId='X'+posX+'Y'+posY;return/*#__PURE__*/ (// Owner is determined by color in the board multi dimensional array\n// Disables the button if owned by a color or winner already determined\n_jsx(Hole,{id:holeId,owner:this.state.gameBoard[posY][posX],disabled:this.state.gameBoard[posY][posX]!=='white'||this.state.winner!=='',onClick:function onClick(){// Copy of the current board\nvar newBoard=_this2.state.gameBoard.map(function(arr){return arr.slice();});// Copy of the row the player clicked\nvar newVal=newBoard[posY];// Updates the white spot to the current players color\nnewVal[posX]=_this2.state.playersTurn;_this2.setState({playersTurn:_this2.state.playersTurn==='red'?'yellow':'red',// Sets the turn to the other player\ngameBoard:newBoard,// Updates the game board with the players move\ncount:_this2.state.count+1,// Increases turn count\nwinner:checkWinner(newBoard)// Checks to see if there is a winner (If no winner, sets to '')\n});}}));}// Creates a row of 7 holes at the y position\n},{key:\"renderRow\",value:function renderRow(posY){return/*#__PURE__*/_jsxs(\"div\",{children:[this.renderHole(0,posY),this.renderHole(1,posY),this.renderHole(2,posY),this.renderHole(3,posY),this.renderHole(4,posY),this.renderHole(5,posY),this.renderHole(6,posY)]});}},{key:\"render\",value:function render(){// Renders rows of gameboard and renders the turn message\nreturn/*#__PURE__*/_jsxs(\"div\",{style:boardStyle,children:[/*#__PURE__*/_jsx(TurnMessage,{win:this.state.winner,count:this.state.count,owner:this.state.playersTurn}),/*#__PURE__*/_jsxs(\"div\",{style:{backgroundColor:'blue',borderRadius:'25px',width:'420px',padding:'15px'},children:[this.renderRow(0),this.renderRow(1),this.renderRow(2),this.renderRow(3),this.renderRow(4),this.renderRow(5)]})]});}}]);return GameBoard;}(React.Component);// Checks if four holes are connected and if they are a players color\nfunction checkFour(a,b,c,d){return a!=='white'&&b!=='white'&&c!=='white'&&d!=='white'&&a===b&&b===c&&c===d;}// Checks each row and column of the board for a winner, returns winning colour\nfunction checkWinner(b){// For each row\nfor(var j=0;j<6;j++){// For each possible position in column \nfor(var i=0;i<4;i++){if(checkFour(b[j][0+i],b[j][1+i],b[j][2+i],b[j][3+i])){return b[j][0+i];}}}// For each column\nfor(var j=0;j<7;j++){// For each possible possition in a row\nfor(var i=0;i<3;i++){if(checkFour(b[0+i][j],b[1+i][j],b[2+i][j],b[3+i][j])){return b[0+i][j];}}}// Return empty string if there isnt a winner\nreturn'';}ReactDOM.render(/*#__PURE__*/_jsxs(\"div\",{style:pageStyle,children:[/*#__PURE__*/_jsx(GameBoard,{}),/*#__PURE__*/_jsx(ResetBtn,{})]}),document.getElementById('root'));","map":{"version":3,"sources":["/Users/cambyce/Downloads/University/Web Technologies (SE 3316)/Labs/Lab2/lab2/src/index.js"],"names":["React","ReactDOM","boardStyle","display","flexDirection","alignItems","justifyContent","height","pageStyle","minWidth","minHeight","backgroundColor","messageStyle","padding","width","border","borderRadius","ResetBtn","window","location","reload","TurnMessage","props","message","player","win","owner","count","Hole","holesStyle","margin","id","onClick","disabled","GameBoard","state","gameBoard","Array","fill","winner","playersTurn","posX","posY","holeId","newBoard","map","arr","slice","newVal","setState","checkWinner","renderHole","renderRow","Component","checkFour","a","b","c","d","j","i","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n/*----- Styling for the game -----*/\n// Board and Display styling\nconst boardStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center', \n  justifyContent: 'space-between', \n  height: '485px'\n}\n\n// Whole pages styling\nconst pageStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center', \n  justifyContent: 'space-evenly', \n  minWidth: '475px',\n  minHeight: '515px',\n  height: '100vh',\n  backgroundColor: 'antiquewhite'\n}\n\n// Message display styling \nconst messageStyle = {\n  display: 'flex', \n  alignItems: 'center', \n  justifyContent: 'center',\n  padding: '5px 10px', \n  width: '175px', \n  backgroundColor: 'white', \n  border: '2px solid black', \n  borderRadius: '35px' \n};\n\n// Button to refresh page and thus restart game\nfunction ResetBtn(){\n  return (\n    <button id={\"resetBtn\"} onClick={() => \n                      {\n                        window.location.reload(false);\n                      }\n                    }>\n      Click To Restart\n    </button>\n  );\n}\n\n// User message displayed for turn and winner\nfunction TurnMessage(props) {\n  let message, player;\n\n  if (props.win !== '') {\n    // If there is a winner\n    message = \"Player Wins!\";\n    player = (props.owner === 'red') ? 'yellow' : 'red'; //Opposite of whos turn it is because last turn won\n  } else if (props.count === 42) {\n    // Board filled without a winner\n    message = \"Tie Game\";\n    player = 'orange';\n  } else {\n    // Displays the next players turn\n    message = \"Players Turn\";\n    player = props.owner;\n  }\n\n  return (\n    <div style={messageStyle}>\n      <Hole owner={player} id={\"displayDot\"} /> \n      <div>\n        {message}\n      </div>\n    </div>\n  );\n}\n\n// Hole button on the board\nfunction Hole(props)\n{\n  // Owner of spot determines color\n  let holesStyle = {\n    backgroundColor: props.owner,\n    height: '50px',\n    width: '50px',\n    borderRadius: '25px',\n    margin: '5px'\n  };\n  \n  return (\n    <button style={holesStyle} id={props.id} onClick={props.onClick} disabled={props.disabled}></button>\n  );\n}\n\nclass GameBoard extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.state = {\n      gameBoard: new Array(6).fill(new Array(7).fill('white')), // Multi dimensional array for the board\n      winner: '', // Winner of the match\n      count: 0, // Number of turns played \n      playersTurn: 'red' // The player who is about to place a checker (Game starts with red player) \n    }\n  }\n\n  // Renders the holes on the board \n  renderHole(posX, posY)\n  {\n    // Unique id for each hole\n    let holeId = 'X' + posX + 'Y' + posY;\n\n    return (\n      // Owner is determined by color in the board multi dimensional array\n      // Disables the button if owned by a color or winner already determined\n      <Hole id={holeId} \n            owner={this.state.gameBoard[posY][posX]} \n            disabled={(this.state.gameBoard[posY][posX] !== 'white' || this.state.winner !== '')}\n            onClick={() => \n              {\n                // Copy of the current board\n                const newBoard = this.state.gameBoard.map((arr) => {\n                  return arr.slice();\n                });\n\n                // Copy of the row the player clicked\n                let newVal = newBoard[posY];\n\n                // Updates the white spot to the current players color\n                newVal[posX] = this.state.playersTurn;\n              \n\n                this.setState({\n                  playersTurn: (this.state.playersTurn === 'red') ? 'yellow' : 'red', // Sets the turn to the other player\n                  gameBoard: newBoard, // Updates the game board with the players move\n                  count: (this.state.count + 1), // Increases turn count\n                  winner: checkWinner(newBoard) // Checks to see if there is a winner (If no winner, sets to '')\n                });\n              }\n          }/>\n    );\n  }\n\n  // Creates a row of 7 holes at the y position\n  renderRow(posY)\n  {\n    return (\n      <div>\n        {this.renderHole(0, posY)}\n        {this.renderHole(1, posY)}\n        {this.renderHole(2, posY)}\n        {this.renderHole(3, posY)}\n        {this.renderHole(4, posY)}\n        {this.renderHole(5, posY)}\n        {this.renderHole(6, posY)}\n      </div>\n    );\n  }\n\n  render() \n  {\n    // Renders rows of gameboard and renders the turn message\n    return (\n      <div style={boardStyle}>\n        <TurnMessage win={this.state.winner} count={this.state.count} owner={this.state.playersTurn} />\n        <div style={{backgroundColor: 'blue', borderRadius: '25px', width: '420px', padding: '15px'}}>\n          {this.renderRow(0)}\n          {this.renderRow(1)}\n          {this.renderRow(2)}\n          {this.renderRow(3)}\n          {this.renderRow(4)}\n          {this.renderRow(5)}\n        </div>\n      </div>\n    );\n  }\n}\n\n// Checks if four holes are connected and if they are a players color\nfunction checkFour(a, b, c, d)\n{\n  return (\n          (a !== 'white' && b !== 'white' && c !== 'white' && d !== 'white') \n          && \n          (a === b && b === c && c === d)\n    );\n}\n\n// Checks each row and column of the board for a winner, returns winning colour\nfunction checkWinner(b)\n{\n  // For each row\n  for (var j = 0; j < 6; j++)\n  {\n    // For each possible position in column \n    for(var i = 0; i < 4; i++) \n    {\n      if (checkFour(b[j][0 + i], b[j][1 + i], b[j][2 + i], b[j][3 + i]))\n      {\n        return b[j][0 + i];\n      }\n    }\n  }\n\n  // For each column\n  for (var j = 0; j < 7; j++)\n  {\n    // For each possible possition in a row\n    for(var i = 0; i < 3; i++) \n    {\n      if (checkFour(b[0 + i][j], b[1 + i][j], b[2 + i][j], b[3 + i][j]))\n      {\n        return b[0 + i][j];\n      }\n    }\n  }\n\n  // Return empty string if there isnt a winner\n  return '';\n}\n\nReactDOM.render(\n  <div style={pageStyle}>\n    <GameBoard />\n    <ResetBtn />\n  </div>\n  ,\n  document.getElementById('root')\n);\n\n"]},"metadata":{},"sourceType":"module"}