{"ast":null,"code":"var _jsxFileName = \"/Users/cambyce/Downloads/University/Web Technologies (SE 3316)/Labs/Lab2/lab2/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst boardStyle = {\n  backgroundColor: 'blue',\n  borderRadius: '3px',\n  width: '420px' //Must maintain hole size below\n\n};\nconst holesStyle = {\n  height: '50px',\n  width: '50px',\n  borderRadius: '25px',\n  margin: '5px'\n};\n\nfunction Hole(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    style: Object.assign(holesStyle.base, {\n      backgroundColor: props.owner\n    }),\n    id: props.id,\n    onClick: props.onClick,\n    children: props.owner\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Hole;\n\nclass GameBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameBoard: new Array(6).fill(new Array(7).fill('grey')),\n      playersTurn: 'red' //Game starts with red player \n\n    };\n  }\n\n  renderHole(posX, posY) {\n    return /*#__PURE__*/_jsxDEV(Hole, {\n      id: 'X' + posX + 'Y' + posY,\n      owner: this.state.gameBoard[posY][posX],\n      onClick: () => {\n        if (this.state.gameBoard[posY][posX] === 'Empty') {\n          const newBoard = this.state.gameBoard.map(arr => {\n            return arr.slice();\n          });\n          let newVal = newBoard[posY];\n          newVal[posX] = this.state.playersTurn;\n          this.setState({\n            playersTurn: this.state.playersTurn === 'red' ? 'yellow' : 'red',\n            gameBoard: newBoard\n          });\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n  renderRow(posY) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.renderHole(0, posY), this.renderHole(1, posY), this.renderHole(2, posY), this.renderHole(3, posY), this.renderHole(4, posY), this.renderHole(5, posY), this.renderHole(6, posY)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.playersTurn, \" Players Turn\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: boardStyle,\n        children: [this.renderRow(0), this.renderRow(1), this.renderRow(2), this.renderRow(3), this.renderRow(4), this.renderRow(5)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  }\n\n  componentDidUpdate() {\n    if (checkWinner(this.state.gameBoard)) {\n      let win = this.state.playersTurn === 'red' ? 'yellow' : 'red';\n    }\n  }\n\n}\n\nfunction checkFour(a, b, c, d) {\n  return a !== 'Empty' && b !== 'Empty' && c !== 'Empty' && d !== 'Empty' && a === b && b === c && c === d;\n}\n\nfunction checkWinner(b) {\n  for (var j = 0; j < 6; j++) {\n    for (var i = 0; i < 4; i++) {\n      if (checkFour(b[j][0 + i], b[j][1 + i], b[j][2 + i], b[j][3 + i])) {\n        return true;\n      }\n    }\n  }\n\n  for (var j = 0; j < 7; j++) {\n    for (var i = 0; i < 3; i++) {\n      if (checkFour(b[0 + i][j], b[1 + i][j], b[2 + i][j], b[3 + i][j])) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(GameBoard, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 145,\n  columnNumber: 3\n}, this), document.getElementById('root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"Hole\");","map":{"version":3,"sources":["/Users/cambyce/Downloads/University/Web Technologies (SE 3316)/Labs/Lab2/lab2/src/index.js"],"names":["React","ReactDOM","boardStyle","backgroundColor","borderRadius","width","holesStyle","height","margin","Hole","props","Object","assign","base","owner","id","onClick","GameBoard","Component","constructor","state","gameBoard","Array","fill","playersTurn","renderHole","posX","posY","newBoard","map","arr","slice","newVal","setState","renderRow","render","componentDidUpdate","checkWinner","win","checkFour","a","b","c","d","j","i","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst boardStyle = {\n  backgroundColor: 'blue',\n  borderRadius: '3px',\n  width: '420px', //Must maintain hole size below\n\n};\n\nconst holesStyle = {\n  height: '50px',\n  width: '50px',\n  borderRadius: '25px',\n  margin: '5px'\n};\n\nfunction Hole(props)\n{\n  return (\n    <button style={Object.assign(holesStyle.base, {backgroundColor: props.owner})} id={props.id} onClick={props.onClick} >\n      {props.owner}\n    </button>\n  );\n}\n\nclass GameBoard extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.state = {\n      gameBoard: new Array(6).fill(new Array(7).fill('grey')),\n\n      playersTurn: 'red', //Game starts with red player \n\n    }\n  }\n\n  renderHole(posX, posY)\n  {\n    return (\n      <Hole  id={'X' + posX + 'Y' + posY} owner={this.state.gameBoard[posY][posX]} onClick={() => \n                                           {\n                                             if(this.state.gameBoard[posY][posX] === 'Empty') {\n                                                const newBoard = this.state.gameBoard.map((arr) => {\n                                                  return arr.slice();\n                                                });\n\n                                                let newVal = newBoard[posY];\n\n                                                newVal[posX] = this.state.playersTurn;\n                                                \n\n                                                this.setState({\n                                                  playersTurn: (this.state.playersTurn === 'red') ? 'yellow' : 'red',\n                                                  gameBoard: newBoard\n                                                });\n                                              }\n                                            }\n                                        }/>\n    );\n  }\n\n  renderRow(posY)\n  {\n    return (\n      <div>\n        {this.renderHole(0, posY)}\n        {this.renderHole(1, posY)}\n        {this.renderHole(2, posY)}\n        {this.renderHole(3, posY)}\n        {this.renderHole(4, posY)}\n        {this.renderHole(5, posY)}\n        {this.renderHole(6, posY)}\n      </div>\n    );\n  }\n\n  render() \n  {\n    return (\n      <div>\n        <div>{this.state.playersTurn} Players Turn</div>\n        <div style={boardStyle}>\n          {this.renderRow(0)}\n          {this.renderRow(1)}\n          {this.renderRow(2)}\n          {this.renderRow(3)}\n          {this.renderRow(4)}\n          {this.renderRow(5)}\n        </div>\n      </div>\n    );\n  }\n\n  componentDidUpdate()\n  {\n    if(checkWinner(this.state.gameBoard))\n    {\n      let win = (this.state.playersTurn === 'red') ? 'yellow' : 'red';\n    }\n  }\n}\n\nfunction checkFour(a, b, c, d)\n{\n  return (\n          (a !== 'Empty' && b !== 'Empty' && c !== 'Empty' && d !== 'Empty') \n          && \n          (a === b && b === c && c === d)\n    );\n}\n\nfunction checkWinner(b)\n{\n  for (var j = 0; j < 6; j++)\n  {\n    for(var i = 0; i < 4; i++) \n    {\n      if (checkFour(b[j][0 + i], b[j][1 + i], b[j][2 + i], b[j][3 + i]))\n      {\n        return true;\n      }\n    }\n  }\n\n  for (var j = 0; j < 7; j++)\n  {\n    for(var i = 0; i < 3; i++) \n    {\n      if (checkFour(b[0 + i][j], b[1 + i][j], b[2 + i][j], b[3 + i][j]))\n      {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nReactDOM.render(\n  <GameBoard />\n  ,\n  document.getElementById('root')\n);\n\n"]},"metadata":{},"sourceType":"module"}